import chalkTemplate from "chalk-template";
// @ts-expect-error No types available
import Table from "table-layout";
import { renderIssue } from "@linthtml/core/messages";
function print_position(start, maxLine, maxColumn) {
    var _a, _b;
    const line = (_a = start === null || start === void 0 ? void 0 : start.line.toString()) !== null && _a !== void 0 ? _a : "-";
    const column = (_b = start === null || start === void 0 ? void 0 : start.column.toString()) !== null && _b !== void 0 ? _b : "-";
    return `${line.padStart(maxLine, " ")}:${column.padEnd(maxColumn, " ")}`;
}
function print_level({ severity }) {
    return `${{
        warning: "yellow warning",
        error: "red error"
    }[severity]}`;
}
export default function print_file_report(report) {
    console.log(chalkTemplate `File: {underline ${report.fileName}}`);
    if (report.config_path) {
        console.log(chalkTemplate `{blue Config file: {white.underline ${report.config_path}}}`);
    }
    if (report.preset) {
        console.log(chalkTemplate `{blue Using preset: {white ${report.preset}}}`);
    }
    const maxLine = report.issues.reduce((max, cv) => { var _a, _b; return Math.max(max, ((_b = (_a = cv.position) === null || _a === void 0 ? void 0 : _a.start) === null || _b === void 0 ? void 0 : _b.line) || 1); }, -1).toString().length;
    const maxColumn = report.issues
        .reduce((max, cv) => { var _a, _b; return Math.max(max, ((_b = (_a = cv.position) === null || _a === void 0 ? void 0 : _a.start) === null || _b === void 0 ? void 0 : _b.column) || 1); }, -1)
        .toString().length;
    const issues = report.issues.map((issue) => {
        var _a;
        const msg = renderIssue(issue);
        const positionTxt = print_position((_a = issue.position) === null || _a === void 0 ? void 0 : _a.start, maxLine, maxColumn);
        const level = print_level(issue);
        return {
            positions: chalkTemplate `{gray ${positionTxt}}`,
            level: chalkTemplate `{${level}}`,
            msg,
            rule: chalkTemplate `{gray ${issue.rule}}`
        };
    });
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call
    const table = new Table(issues, {
        noTrim: true,
        maxWidth: 250
    });
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access
    console.log(table.toString());
}
