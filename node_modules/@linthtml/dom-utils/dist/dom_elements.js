import { NodeWithChildren } from 'domhandler';
import { ElementType } from 'domelementtype';

// TODO: Add new type or template for CharValue with non empty raw value (like attribute value)
/**
 * Low level object that contains a string and it's position in a document.
 *
 * Can be used to "describe" the key of an HTML attribute, the text corresponding to a tag opening tag (`<[span]`), the content of HTML attribute...
 */
class CharValue {
    constructor(chars, loc, raw) {
        this.chars = chars;
        this.loc = loc;
        this.raw = raw;
        this.chars = chars;
        this.raw = raw;
        this.loc = loc;
    }
}
/**
 * An HTML attribute with the name, equal and string value
 */
class NodeAttribute {
    constructor(name, loc, index, equal = null, value = null) {
        this.name = name;
        this.loc = loc;
        this.index = index;
        this.equal = equal;
        this.value = value;
        this.type = "attribute";
        this.name = name;
        this.index = index;
        this.value = value;
        this.equal = equal;
        this.loc = loc;
    }
}
/**
 * Start and end positions of an element in a document
 */
class Range {
    constructor(start, end) {
        this.start = start;
        this.end = end;
        this.start = start;
        this.end = end;
    }
}
/**
 * The position of element in a document
 */
class Position {
    constructor(line, column) {
        this.line = line;
        this.column = column;
        this.line = line;
        this.column = column;
    }
}
/** @hidden */
function ExtendedNode(Base) {
    return class TExtractor extends Base {
        constructor() {
            super(...arguments);
            this._close = undefined;
        }
        /**
         * Node position in document
         */
        get loc() {
            return this._loc;
        }
        set loc(value) {
            this._loc = value;
        }
        /**
         * Node open tag details
         */
        get open() {
            return this._open;
        }
        set open(value) {
            this._open = value;
        }
        /**
         * Node close tag details.
         * _Can be null for self closing tag_
         */
        get close() {
            return this._close;
        }
        set close(value) {
            this._close = value;
        }
    };
}
// TODO Keep in sync with domhandler types
// TODO Change NodeWithChildren type for children
/**
 * The node element extends the one from Domhandler to add some extra properties ({@link https://domhandler.js.org/classes/Node.html})
 */
class Node extends ExtendedNode(NodeWithChildren) {
    constructor() {
        super(...arguments);
        this.parent = null;
        // eslint-disable-next-line no-use-before-define
        this.children = []; // {Node[]}
    }
}
/**
 * An element within the DOM.
 */
class Element extends Node {
    constructor(name, attributes, children = [], type = name === "script"
        ? ElementType.Script
        : name === "style"
            ? ElementType.Style
            : ElementType.Tag) {
        super(type, children);
        this.name = name;
        this.attributes = attributes;
    }
    // DOM Level 1 aliases
    get tagName() {
        return this.name;
    }
    set tagName(name) {
        this.name = name;
    }
}
/**
 * The root node of the document.
 */
class Document extends Node {
    constructor(children) {
        super(ElementType.Root, children);
    }
}

export { CharValue, Document, Element, Node, NodeAttribute, Position, Range };
