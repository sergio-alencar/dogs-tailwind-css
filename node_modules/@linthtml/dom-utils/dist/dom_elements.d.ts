import { NodeWithChildren } from "domhandler";
import { ElementType } from "domelementtype";
/**
 * Low level object that contains a string and it's position in a document.
 *
 * Can be used to "describe" the key of an HTML attribute, the text corresponding to a tag opening tag (`<[span]`), the content of HTML attribute...
 */
export declare class CharValue {
    chars: string;
    loc: Range;
    raw?: string | undefined;
    constructor(chars: string, loc: Range, raw?: string | undefined);
}
/**
 * An HTML attribute with the name, equal and string value
 */
export declare class NodeAttribute {
    name: CharValue;
    loc: Range;
    index: number;
    equal: CharValue | null;
    value: CharValue | null;
    type: string;
    constructor(name: CharValue, loc: Range, index: number, equal?: CharValue | null, value?: CharValue | null);
}
/**
 * Start and end positions of an element in a document
 */
export declare class Range {
    start: Position;
    end: Position;
    constructor(start: Position, end: Position);
}
/**
 * The position of element in a document
 */
export declare class Position {
    line: number;
    column: number;
    constructor(line: number, column: number);
}
interface MyExtendedNode {
    loc: Range;
    open: CharValue;
    close: CharValue | undefined;
}
declare const Node_base: {
    new (...args: any[]): MyExtendedNode;
    prototype: MyExtendedNode;
} & typeof NodeWithChildren;
/**
 * The node element extends the one from Domhandler to add some extra properties ({@link https://domhandler.js.org/classes/Node.html})
 */
export declare class Node extends Node_base {
    parent: NodeWithChildren | null;
    children: Node[];
}
/**
 * An element within the DOM.
 */
export declare class Element extends Node {
    name: string;
    attributes: NodeAttribute[];
    constructor(name: string, attributes: NodeAttribute[], children?: Node[], type?: ElementType.Tag | ElementType.Script | ElementType.Style);
    get tagName(): string;
    set tagName(name: string);
    "x-attribsNamespace"?: Record<string, string>;
    "x-attribsPrefix"?: Record<string, string>;
}
/**
 * The root node of the document.
 */
export declare class Document extends Node {
    constructor(children: Node[]);
    "x-mode"?: "no-quirks" | "quirks" | "limited-quirks";
}
/**
 * The DataNode element extends the one from Domhandler to add some extra properties ({@link https://domhandler.js.org/classes/DataNode.html})
 */
export declare class DataNode extends Node {
    data: string;
    /**
     * @param type The type of the node
     * @param data The content of the data node
     */
    constructor(type: ElementType.Comment | ElementType.Text | ElementType.Directive, data: string);
    get nodeValue(): string;
    set nodeValue(data: string);
}
/**
 * Text within the document.
 * The Text element extends the one from Domhandler to add some extra properties ({@link https://domhandler.js.org/classes/Text.html})
 */
export declare class Text extends DataNode {
    constructor(data: string);
}
/**
 * Comments within the document.
 *
 * The Comment element extends the one from Domhandler to add some extra properties ({@link https://domhandler.js.org/classes/Comment.html})
 */
export declare class Comment extends DataNode {
    constructor(data: string);
}
/**
 * Processing instructions, including doc types.
 *
 * The ProcessingInstruction element extends the one from Domhandler to add some extra properties ({@link https://domhandler.js.org/classes/ProcessingInstruction.html})
 */
export declare class ProcessingInstruction extends DataNode {
    name: string;
    constructor(name: string, data: string);
    "x-name"?: string;
    "x-publicId"?: string;
    "x-systemId"?: string;
}
export {};
//# sourceMappingURL=dom_elements.d.ts.map