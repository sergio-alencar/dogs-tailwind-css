import Issue from "../../issue.js";
import { is_tag_node, attribute_value, attribute_has_value } from "@linthtml/dom-utils";
const RULE_NAME = "input-req-label";
function is_input_or_label(node) {
    return ["input", "label"].indexOf(node.name) !== -1;
}
// TODO: Cleanup rule
function lint(node, _config, { report }) {
    if (!is_tag_node(node) || is_input_or_label(node) === false) {
        return;
    }
    // if it's a label with a 'for', store that value
    if (node.name === "label") {
        const for_attribute = attribute_value(node, "for");
        if (for_attribute) {
            // @ts-expect-error To remove once moved to visitor pattern
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            this.labels[for_attribute.chars] = node;
        }
        return;
    }
    if (attribute_has_value(node, "type", "hidden")) {
        return;
    }
    if (attribute_has_value(node, "type", "button")) {
        const value = attribute_value(node, "value");
        if (value === null || value.chars.trim() === "") {
            return report({
                code: "E033",
                position: node.open.loc,
                meta: {
                    data: {
                        idValue: "null"
                    }
                }
            });
        }
        return;
    }
    // check if the input has a label as a parent.
    let parent = node.parent; // TODO: Fix typing for parent node
    while (parent) {
        if (parent.name === "label") {
            return;
        }
        parent = parent.parent;
    }
    // check if the input has a named label, by storing the values to
    // check at the end.
    const id = attribute_value(node, "id");
    if (id) {
        // @ts-expect-error To remove once moved to visitor pattern
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access
        this.inputsInfo.push({
            id: id.chars,
            loc: node.open.loc
        });
    }
    else {
        report({
            code: "E033",
            position: node.open.loc,
            meta: {
                data: {
                    idValue: "null"
                }
            }
        });
    }
}
// REMOVE
function end() {
    const issues = [];
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const { inputsInfo, labels } = this;
    inputsInfo.forEach(({ id, loc }) => {
        if (!labels[id]) {
            issues.push(new Issue(RULE_NAME, loc, {
                code: "E033",
                rule: RULE_NAME,
                data: {
                    idValue: id
                }
            }));
        }
    });
    // wipe previous table
    // @ts-expect-error To remove once moved to visitor pattern
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    this.labels = {};
    // @ts-expect-error To remove once moved to visitor pattern
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    this.inputsInfo = [];
    return issues;
}
export default {
    name: RULE_NAME,
    lint,
    end,
    labels: {},
    inputsInfo: []
};
