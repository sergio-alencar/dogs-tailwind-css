import path from "path";
import fs from "fs";
import { cosmiconfig } from "cosmiconfig";
import globalModules from "global-modules";
import resolveFrom from "resolve-from";
import CustomError from "./utils/custom-errors.js";
import { fileURLToPath } from "url";
const IS_TEST = process.env.NODE_ENV === "test";
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const STOP_DIR = IS_TEST ? path.resolve(__dirname, "..") : undefined;
function get_module_path(basedir, module_name) {
    // 1. Try to resolve from the provided directory
    // 2. Try to resolve from `process.cwd`
    // 3. Try to resolve from global `node_modules` directory
    let path = resolveFrom.silent(basedir, module_name);
    if (!path) {
        path = resolveFrom.silent(process.cwd(), module_name);
    }
    if (!path) {
        path = resolveFrom.silent(globalModules, module_name);
    }
    if (!path) {
        throw new CustomError("CORE-03", { module_name });
    }
    return path;
}
function merge_configs(a, b) {
    let plugins = [];
    if (a.plugins || b.plugins) {
        if (a.plugins) {
            plugins = [...a.plugins];
        }
        if (b.plugins) {
            plugins = [...new Set([...plugins, ...b.plugins])];
        }
    }
    return {
        ...a,
        ...b,
        plugins,
        plugins_rules: {
            ...a.plugins_rules,
            ...b.plugins_rules
        },
        rules: {
            ...a.rules,
            ...b.rules
        }
    };
}
/**
 * @param {CosmiconfigResult} cosmiconfig_result
 * @return {CosmiconfigResult}
 */
async function augment_config(cosmiconfig_result) {
    if (!cosmiconfig_result) {
        return null;
    }
    const config_dir = path.dirname(cosmiconfig_result.filepath || "");
    const { ignoreFiles = [], ...config } = cosmiconfig_result.config;
    let result = {
        filepath: cosmiconfig_result.filepath,
        config
    };
    if (config.extends) {
        const normalized_extends = Array.isArray(config.extends) // throw an error if not string or array
            ? config.extends
            : [config.extends];
        const extended_configs = await Promise.all(normalized_extends.map((extends_path) => load_extended_config(extends_path, config_dir)));
        const extended_config = extended_configs.reduce(merge_configs, {});
        result = {
            filepath: result.filepath,
            config: merge_configs(extended_config, result.config)
        };
    }
    return {
        filepath: result.filepath,
        config: {
            ...result.config,
            ignoreFiles
        }
    };
}
/**
 * @param {object} extends_path
 * @param {string} config_dir
 * @return {CosmiconfigResult}
 */
async function load_extended_config(extends_path, config_dir) {
    const extendPath = get_module_path(config_dir, extends_path);
    // @ts-expect-error TODO fix (use "linthtml" ?
    const cosmiconfig_result = await cosmiconfig(null, {
        stopDir: STOP_DIR,
        transform: augment_config
    }).load(extendPath);
    return cosmiconfig_result ? cosmiconfig_result.config : {}; // is {} possible?
}
/**
 * @param {Object} rule_definition
 * @param {string} plugin_name
 * @throws {CustomError}
 */
function check_plugin_rule(rule_definition, plugin_name) {
    if (!rule_definition.name) {
        throw new CustomError("CORE-06", { plugin_name });
    }
    if (!rule_definition.name.includes("/")) {
        throw new CustomError("CORE-07", {
            rule_name: rule_definition.name,
            plugin_name
        });
    }
    if (!rule_definition.lint) {
        throw new CustomError("CORE-08", { rule_name: rule_definition.name });
    }
}
/**
 * @param {string} plugin_name
 * @returns {Object}
 * @throws {CustomError}
 */
function load_plugin(plugin_name) {
    return import(plugin_name)
        .then((plugin_import) => {
        var _a;
        return (_a = plugin_import.default) !== null && _a !== void 0 ? _a : plugin_import;
    })
        .catch((error) => {
        if (error.code === "ERR_REQUIRE_ESM" ||
            error.message.match("module is not defined in ES module scope")) {
            throw new CustomError("CORE-10", {
                module_name: plugin_name,
                message: error.message
            });
        }
        throw new CustomError("CORE-05", { module_name: plugin_name });
    });
}
/**
 * @param {CosmiconfigResult} cosmiconfig_result
 * @returns {CosmiconfigResult}
 * @throws {CustomError}
 */
async function add_plugins_rules(cosmiconfig_result) {
    if (cosmiconfig_result.config.plugins) {
        const normalized_plugins = Array.isArray(cosmiconfig_result.config.plugins) // throw an error if not string or array
            ? cosmiconfig_result.config.plugins
            : [cosmiconfig_result.config.plugins];
        const plugins = await Promise.all(normalized_plugins.map((plugin_name) => load_plugin(plugin_name).then((pkg) => ({ plugin_name, pkg }))));
        const plugins_rules = plugins.reduce((plugin_rules, { plugin_name, pkg }) => {
            const { rules } = pkg;
            if (rules && !Array.isArray(rules)) {
                throw new CustomError("CORE-09", { plugin_name });
            }
            (rules !== null && rules !== void 0 ? rules : []).forEach((rule_definition) => {
                check_plugin_rule(rule_definition, plugin_name);
                plugin_rules[rule_definition.name] = rule_definition;
            });
            return plugin_rules;
        }, {});
        return {
            ...cosmiconfig_result,
            config: merge_configs(cosmiconfig_result.config, { plugins_rules } // use partial type?
            )
        };
    }
    return cosmiconfig_result;
}
const explorer = cosmiconfig("linthtml", {
    stopDir: STOP_DIR,
    // searchStrategy: "global", // TODO: Add or remove when migrating to cosmiconfig v9
    packageProp: "linthtmlConfig",
    transform: augment_config
});
async function config_from_path(file_path) {
    const config_path = path.resolve(process.cwd(), file_path);
    let isconfig_directory = false;
    try {
        let config = null;
        isconfig_directory = fs.lstatSync(config_path).isDirectory();
        if (isconfig_directory) {
            // stopDir: config_path needed?
            // create cosmiconfigSync only once ?
            config = await explorer.search(config_path);
        }
        else {
            config = await explorer.load(config_path);
        }
        if (config === null) {
            throw new Error();
        }
        return add_plugins_rules(config);
    }
    catch (error) {
        // let CustomError (like CORE-03) passthrough
        if (error instanceof CustomError) {
            throw error;
        }
        if (isconfig_directory) {
            throw new CustomError("CORE-01", { config_path });
        }
        throw new CustomError("CORE-02", { config_path });
    }
}
async function find_local_config(file_path) {
    const config = await explorer.search(file_path);
    return config ? add_plugins_rules(config) : null;
}
export { config_from_path, find_local_config, get_module_path };
