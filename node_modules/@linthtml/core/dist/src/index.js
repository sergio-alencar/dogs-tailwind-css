import { config_from_path, find_local_config } from "./read-config.js";
import Linter from "./linter.js";
import LegacyLinter from "./legacy/linter.js";
import { presets } from "./presets/index.js";
import rules from "./rules/index.js";
import * as messages from "./messages.js";
import path from "path";
import fs from "fs";
import { globbySync } from "globby";
import ignore from "ignore";
import { EOL } from "os";
const DEFAULT_EXCLUDED_FOLDERS = ["!node_modules/"];
/**
 * The linthtml namespace.
 */
const linthtml = function (html, config) {
    if ((config === null || config === void 0 ? void 0 : config.rules) !== undefined) {
        const linter = new Linter(config);
        return linter.lint(html);
    }
    const linter = new LegacyLinter(null, config);
    return linter.lint(html);
};
function fromConfig(config) {
    if (config && config.rules !== undefined) {
        return new Linter(config);
    }
    return new LegacyLinter(null, config);
}
linthtml.fromConfig = fromConfig;
function get_files_to_lint(input, config = {}) {
    const ignore_config = read_dot_ignore_file();
    const ignore_files = config.ignoreFiles;
    const ignore_patterns = ignore_config || ignore_files;
    const file_paths = input.reduce((paths, pattern) => [...paths, ...get_files_from_glob(pattern, ignore_patterns)], []);
    return filter_ignored_files(file_paths, ignore_patterns);
}
function get_files_from_glob(glob_pattern, ignore_config) {
    const use_default_ignore = ignore_config === undefined && path.isAbsolute(glob_pattern) === false;
    return globbySync([glob_pattern, ...DEFAULT_EXCLUDED_FOLDERS], {
        gitignore: use_default_ignore,
        expandDirectories: {
            files: ["**/*.html"],
            extensions: ["html"]
        }
    });
}
function filter_ignored_files(file_paths, ignore_pattern) {
    if (ignore_pattern === undefined) {
        return file_paths;
    }
    // Eslint not correctly getting types for ignorer here
    const ignorer = ignore().add(ignore_pattern);
    return ignorer.filter(file_paths);
}
function read_dot_ignore_file() {
    const ignore_file_path = path.join(process.cwd(), ".linthtmlignore");
    if (fs.existsSync(ignore_file_path)) {
        return fs
            .readFileSync(ignore_file_path)
            .toString()
            .split(EOL)
            .filter((pattern) => pattern !== "");
    }
    return undefined;
}
function should_ignore_file(file_path, ignore_pattern = []) {
    if (ignore_pattern.length === 0) {
        return false;
    }
    // Eslint not correctly getting types for ignorer here
    const ignorer = ignore().add(ignore_pattern);
    return ignorer.ignores(file_path);
}
function create_file_linter(file_path, config) {
    return {
        file_path,
        preset: config.preset,
        config_path: config.filepath,
        linter: linthtml.fromConfig(config.config)
    };
}
/**
 * Create a linter per each file found using the globs provided
 *
 * @param {string[]} globs - An array of globs
 * @param {string} [config_path] - Path the config file that will be use to create configure the linters
 */
linthtml.create_linters_for_files = async function (globs, config_path) {
    if (config_path) {
        const config = await config_from_path(config_path);
        const files = get_files_to_lint(globs, config.config);
        return files.map((file_path) => create_file_linter(file_path, config));
    }
    const files = get_files_to_lint(globs);
    const files_config = await Promise.all(files.map((file_path) => find_local_config(file_path).then((config) => ({ file_path, config }))));
    return files_config.reduce((files_to_lint, { file_path, config }) => {
        // if no config, fallback to presets as before
        const local_config = config !== null && config !== void 0 ? config : {
            config: presets.default,
            preset: "default"
        };
        if (!should_ignore_file(file_path, local_config.config.ignoreFiles)) {
            return files_to_lint.concat(create_file_linter(file_path, local_config));
        }
        return files_to_lint;
    }, []);
};
linthtml.from_config_path = async function (config_path) {
    const config = await config_from_path(config_path);
    return linthtml.fromConfig(config.config);
};
linthtml.Linter = Linter;
linthtml.LegacyLinter = LegacyLinter;
linthtml.rules = rules;
linthtml.presets = presets;
linthtml.messages = messages;
export default linthtml;
export { config_from_path, find_local_config };
