import type { CharValue, Range } from "@linthtml/dom-utils/dom_elements";
import type Issue from "./issue.js";
export declare const CORE_ERRORS: {
    [code: string]: (meta?: Record<string, unknown>) => string;
};
export declare const ISSUE_ERRORS: {
    readonly E000: () => string;
    readonly E001: (data: {
        attribute: string;
    }) => string;
    readonly E002: (data: {
        format: string;
        attribute: string;
    }) => string;
    readonly E003: (data: {
        attribute: string;
    }) => string;
    readonly E004: (data: {
        attribute: string;
    }) => string;
    readonly E005: (data: {
        attribute: string;
        format: string;
    }) => string;
    readonly E006: (data: {
        attribute: string;
    }) => string;
    readonly E007: () => string;
    readonly E008: () => string;
    readonly E009: (data: {
        format: string;
    }) => string;
    readonly E010: (data: {
        attribute: string;
        word: string;
    }) => string;
    readonly E011: (data: {
        value: string;
        format: string;
        attribute: string;
    }) => string;
    readonly E012: (data: {
        id: string;
        line: number;
        column: number;
    }) => string;
    readonly E013: () => string;
    readonly E014: () => string;
    readonly E015: (data: {
        format: string;
    }) => string;
    readonly E016: (data: {
        tag: string;
    }) => string;
    readonly E017: (data: {
        name: string;
    }) => string;
    readonly E018: (data: {
        expect: "always" | "never";
    }) => string;
    readonly E019: () => string;
    readonly E020: () => string;
    readonly E021: (data: {
        id: string;
    }) => string;
    readonly E022: (data: {
        id: string;
    }) => string;
    readonly E023: (data: {
        part: string;
        desc: string;
        chars: string;
    }) => string;
    readonly E024: (data: {
        tagName: string;
        expected_indentation: number;
        expected_type: "spaces" | "tabs" | "mixed";
        current_indentation: number;
        current_type: "spaces" | "tabs" | "mixed";
    }, { start }: Range) => string;
    readonly E025: () => string;
    readonly E026: (data: {
        tabindex: number;
    }) => string;
    readonly E027: () => string;
    readonly E028: (data: {
        num: number;
    }) => string;
    readonly E029: (data: {
        title: string;
        max_length: number;
    }) => string;
    readonly E030: (data: {
        open: CharValue;
    }) => string;
    readonly E031: () => string;
    readonly E032: () => string;
    readonly E033: (data: {
        idValue: string;
    }) => string;
    readonly E034: () => string;
    readonly E035: () => string;
    readonly E036: (data: {
        isClose: boolean;
        tagName: string;
        expected_indentation: number;
        current_indentation: number;
    }, { start }: Range) => string;
    readonly E037: (data: {
        limit: string;
    }) => string;
    readonly E038: (data: {
        lang: string;
    }) => string;
    readonly E039: (data: {
        lang: string;
    }) => string;
    readonly E040: (data: {
        length: number;
        maxlength: number;
    }) => string;
    readonly E041: (data: {
        classes: string;
    }) => string;
    readonly E042: () => string;
    readonly E043: (data: {
        attribute: string;
        previous: string;
    }) => string;
    readonly E044: () => string;
    readonly E045: () => string;
    readonly E046: () => string;
    readonly E047: () => string;
    readonly E049: () => string;
    readonly E051: (data: {
        name: string;
    }) => string;
    readonly E052: (data: {
        preset: string;
    }) => string;
    readonly E055: () => string;
    readonly E056: (data: {
        expectedMin: number;
        expectedMax: number;
        value: string;
    }) => string;
    readonly E057: (data: {
        attribute: string;
        tag: string;
    }) => string;
    readonly E058: () => string;
    readonly E059: (data: {
        content: string;
        min_length: number;
    }) => string;
    readonly E060: () => string;
    readonly E061: () => string;
    readonly E062: () => string;
    readonly E063: () => string;
    readonly E064: (data: {
        is_before: boolean;
    }) => string;
    readonly E065: () => string;
    readonly INLINE_01: (data: {
        instruction: string;
    }) => string;
    readonly INLINE_02: (data: {
        rule_name: string;
    }) => string;
    readonly INLINE_03: (data: {
        rule_configuration: string;
    }) => string;
    readonly INLINE_04: (data: {
        rule_name: string;
        error: string;
    }) => string;
    readonly DEPRECATED_RULE: (data: {
        rule_name: string;
        hint?: string;
    }) => string;
};
export declare function renderIssue(issue: Issue): string;
export declare function get_issue_message(issue: Issue): string;
//# sourceMappingURL=messages.d.ts.map