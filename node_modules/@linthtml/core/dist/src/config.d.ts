import type { ActiveRuleDefinition, LegacyLinterConfig, LegacyRuleDefinition, LinterConfig, RuleConfig, RuleDefinition } from "./read-config.js";
export declare class NonExistingRule extends Error {
    rule_name: string;
    constructor(rule_name: string);
}
export declare class InvalidRuleConfig extends Error {
    constructor(message: string);
}
export default class Config {
    rules: Record<string, RuleDefinition>;
    activated_rules: Record<string, ActiveRuleDefinition>;
    config: LinterConfig;
    legacy_config: LegacyLinterConfig;
    constructor(rules?: LegacyRuleDefinition[], config?: LinterConfig);
    /**
     * Activate rules from a config object
     */
    activateRules(config: LinterConfig): void;
    /**
     * Get a rule by name.
     */
    getRule(rule_name: string): RuleDefinition | never;
    setRuleConfig(rule: RuleDefinition, rules_config: Record<string, RuleConfig>): void | never;
    generateLegacyConfig(config: LinterConfig): LegacyLinterConfig;
}
//# sourceMappingURL=config.d.ts.map